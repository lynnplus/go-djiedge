/*
 * Copyright (c) 2023 Lynn <lynnplus90@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package djiedge

import (
	"errors"
	"strconv"
	"strings"
)

// FirmwareVersion firmware version number
type FirmwareVersion struct {
	MajorVersion  uint8
	MinorVersion  uint8
	ModifyVersion uint8
	DebugVersion  uint8
}

// ParseVersion parse a version string, the string form should be ‘1.2.3.4’ or ‘1.2.3’
func ParseVersion(s string) (*FirmwareVersion, error) {
	if s == "" {
		return nil, errors.New("empty version string")
	}

	parse := func(in string) (uint8, error) {
		tmp, err := strconv.ParseUint(in, 10, 8)
		if err != nil {
			return 0, err
		}
		return uint8(tmp), err
	}

	ss := strings.Split(s, ".")
	if len(ss) == 0 {
		v, err := parse(s)
		if err != nil {
			return nil, err
		}
		return &FirmwareVersion{v, 0, 0, 0}, nil
	}

	tmp := []uint8{0, 0, 0, 0}
	var err error
	for i, s2 := range ss {
		if i >= 4 {
			break
		}

		tmp[i], err = parse(s2)
		if err != nil {
			return nil, err
		}
	}
	return &FirmwareVersion{tmp[0], tmp[1], tmp[2], tmp[3]}, nil
}

// AuthInfo app certification information generated by DJI developer website account
type AuthInfo struct {
	Name    string
	Id      string
	AppKey  string
	License string
	Account string
}

// DeviceInfo firmware device information
type DeviceInfo struct {
	ProductName     string
	VendorName      string
	SerialNumber    string
	FirmwareVersion FirmwareVersion
}

// RSA2048Key the EdgeSDK obtains the RSA2048 key for establishing secure communication
type RSA2048Key struct {
	PrivateKey string
	PublicKey  string
}

type LogLevel int

func (l LogLevel) IsValid() bool {
	return l >= LogLevelError && l <= LogLevelDebug
}

const (
	LogLevelError LogLevel = iota
	LogLevelWarn
	LogLevelInfo
	LogLevelDebug
)

type Logger struct {
	Level          LogLevel
	EnableColorful bool
	Outputer       func(msg string)
}
